# PIPELINE DEFINITION
# Name: dicom-to-nifti-from-orthanc-pipeline
# Description: Pipeline to convert DICOM images to NIFTI format from Orthanc Instance.
# Inputs:
#    output_folder: str
#    studies: str
components:
  comp-dicom-to-nifti:
    executorLabel: exec-dicom-to-nifti
    inputDefinitions:
      parameters:
        output_folder:
          parameterType: STRING
        studies:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-dicom-to-nifti:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - dicom_to_nifti
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef dicom_to_nifti(studies: str, output_folder: str):\n    from monailabel.datastore.dicom\
          \ import DICOMWebDatastore, DICOMwebClientX\n    from dicomweb_client.session_utils\
          \ import create_session_from_user_pass\n    import SimpleITK as sitk\n \
          \   from pydicom.dataset import Dataset\n    from pathlib import Path\n\
          \    import nibabel as nib\n    from nilearn.image import resample_to_img\n\
          \    from monailabel.config import settings\n\n\n    dw_session = create_session_from_user_pass(\n\
          \                        settings.MONAI_LABEL_DICOMWEB_USERNAME, settings.MONAI_LABEL_DICOMWEB_PASSWORD\n\
          \                    )\n\n    dw_client = DICOMwebClientX(\n           \
          \         url=studies,\n                    session=dw_session,\n      \
          \              qido_url_prefix=settings.MONAI_LABEL_QIDO_PREFIX,\n     \
          \               wado_url_prefix=settings.MONAI_LABEL_WADO_PREFIX,\n    \
          \                stow_url_prefix=settings.MONAI_LABEL_STOW_PREFIX,\n   \
          \             )\n\n    cache_path = settings.MONAI_LABEL_DICOMWEB_CACHE_PATH\n\
          \    cache_path = cache_path.strip() if cache_path else \"\"\n    fetch_by_frame\
          \ = settings.MONAI_LABEL_DICOMWEB_FETCH_BY_FRAME\n    search_filter = settings.MONAI_LABEL_DICOMWEB_SEARCH_FILTER\n\
          \    convert_to_nifti = settings.MONAI_LABEL_DICOMWEB_CONVERT_TO_NIFTI\n\
          \n    datastore = DICOMWebDatastore(\n                client=dw_client,\n\
          \                search_filter=search_filter,\n                cache_path=cache_path\
          \ if cache_path else None,\n                fetch_by_frame=fetch_by_frame,\n\
          \                convert_to_nifti=convert_to_nifti,\n            )\n\n \
          \   datalist = datastore.datalist()\n\n    print(f\"Total Studies: {len(datalist)}\"\
          )\n\n    Path(output_folder).mkdir(parents=True, exist_ok=True)\n    for\
          \ data in datalist:\n        image = data[\"image\"]\n        img = sitk.ReadImage(image)\n\
          \        study_id = Path(image).name[:-len(\".nii.gz\")]\n\n        # Find\
          \ PatientID from StudyInstanceUID\n        study_list = dw_client.search_for_studies(search_filters={\"\
          StudyInstanceUID\": study_id})\n\n        if study_list:\n            meta\
          \ = Dataset.from_json(study_list[0])\n            patient_id = str(meta.get(\"\
          PatientID\", \"Unknown\"))\n        else:\n            patient_id = \"Unknown\"\
          \n        Path(output_folder).joinpath(patient_id).mkdir(parents=True, exist_ok=True)\n\
          \        sitk.WriteImage(img, Path(output_folder).joinpath(patient_id, f\"\
          {patient_id}_image.nii.gz\"))\n\n        label = data[\"label\"]\n     \
          \   lbl = sitk.ReadImage(label)\n        sitk.WriteImage(lbl, Path(output_folder).joinpath(patient_id,\
          \ f\"{patient_id}_label.nii.gz\"))\n        input_image = nib.load(Path(output_folder).joinpath(patient_id,\
          \ f\"{patient_id}_label.nii.gz\"))\n        reference_image = nib.load(Path(output_folder).joinpath(patient_id,\
          \ f\"{patient_id}_image.nii.gz\"))\n        resampled_image = resample_to_img(input_image,\
          \ reference_image, interpolation=\"nearest\", fill_value=0)\n        nib.save(resampled_image,\
          \ Path(output_folder).joinpath(patient_id, f\"{patient_id}_label.nii.gz\"\
          ))\n\n"
        image: maiacloud/monet-pipeline:1.3-monailabel
        resources:
          cpuLimit: 8.0
          cpuRequest: 1.0
          memoryLimit: 34.359738368
          memoryRequest: 8.589934592
          resourceCpuLimit: 8000m
          resourceCpuRequest: 1000m
          resourceMemoryLimit: 32Gi
          resourceMemoryRequest: 8Gi
pipelineInfo:
  description: Pipeline to convert DICOM images to NIFTI format from Orthanc Instance.
  name: dicom-to-nifti-from-orthanc-pipeline
root:
  dag:
    tasks:
      dicom-to-nifti:
        cachingOptions: {}
        componentRef:
          name: comp-dicom-to-nifti
        inputs:
          parameters:
            output_folder:
              componentInputParameter: output_folder
            studies:
              componentInputParameter: studies
        taskInfo:
          name: dicom-to-nifti
  inputDefinitions:
    parameters:
      output_folder:
        parameterType: STRING
      studies:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.2
---
platforms:
  kubernetes:
    deploymentSpec:
      executors:
        exec-dicom-to-nifti:
          genericEphemeralVolume:
          - accessModes:
            - ReadWriteOnce
            mountPath: /dev/shm
            size: 2Gi
            storageClassName: local-path
            volumeName: shm
          pvcMount:
          - constant: shared
            mountPath: /mnt/Data
            pvcNameParameter:
              runtimeValue:
                constant: shared
